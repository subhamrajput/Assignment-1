// WAP to Check Armstrong Number for n digit number


#include <iostream>

using namespace std;

int main() {
    int num, originalNum, remainder, result = 0;
    cout << "Enter a three-digit integer: ";
    cin >> num;
    originalNum = num;

    while (originalNum != 0) {

        remainder = originalNum % 10;
        result += remainder * remainder * remainder;
        originalNum /= 10;
    }

    if (result == num)
        cout << num << " is an Armstrong number.";
    else
        cout << num << " is not an Armstrong number.";

    return 0;
}

-------------------------------------------------------------------------------------------------------------

//WAP to Armstrong Numbers Between Two Integers


#include <iostream>
using namespace std;

int main()
{
  int num1, num2, i, num, digit, sum;

  cout << "Enter first number: ";
  cin >> num1;

  cout << "Enter second number: ";
  cin >> num2;

  cout << "Armstrong numbers between " << num1 << " and " << num2 << " are: " << endl;
  for(i = num1; i <= num2; i++)
  {
        sum = 0;
        num = i;

        for(; num > 0; num /= 10)
        {
            digit = num % 10;
            sum = sum + digit * digit * digit;
        }

        if(sum == i)
        {
            cout << i << endl;
        }
  }

  return 0;
}

------------------------------------------------------------------------------------------------------------

//WAP to Display Fibonacci series

#include <iostream>

using namespace std;



int main() {
    int n, t1 = 0, t2 = 1, nextTerm = 0;

    cout << "Enter the number of terms: ";
    cin >> n;

    cout << "Fibonacci Series: ";

    for (int i = 1; i <= n; ++i) {
        // Prints the first two terms.
        if(i == 1) {
            cout << t1 << ", ";
            continue;
        }
        if(i == 2) {
            cout << t2 << ", ";
            continue;
        }
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;

        cout << nextTerm << ", ";
    }
    return 0;
}

------------------------------------------------------------------------------------
//WAP to Check Prime Number using loop?
#include <iostream>

using namespace std;

int main()
{
    int n , flag = 0 , m = 0;
    cout << "Enter number to check prime :" << endl;
    cin>>n;
    m = n/2;
    for(int i = 2; i < m ; i++)
    {
        if(n % i == 0)
        {
             cout<<n <<"is not a prime number"<<endl;
             flag = 1;
             break;
        }

    }

    if(flag == 0)
    {
        cout<<n <<"is prime number"<<endl;
    }

    return 0;
}

---------------------------------------------------------------------------------------------
// WAP to Check if a Number is Positive or Negative

#include <iostream>

using namespace std;

int main()
{
    int n;
    cout << "Enter number" << endl;
    cin>>n;
    if(n < 0)
        cout<<"number is negative"<<endl;
    else
        cout<<"number is positive"<<endl;
    return 0;
}

----------------------------------------------------------------------------------------------
//WAP to Find Factorial of a number

#include <iostream>

using namespace std;

int main()
{
    int n;
    int fact = 1;
    cout << "Enter number" << endl;
    cin>>n;
    for(int i = 1 ; i <= n ; i++)
    {
        fact = fact * i;
    }
    cout<<"factorial :"<<fact<<endl;
    return 0;
}

-------------------------------------------------------------------------------------------
//WAP to Display Uppercased A to Z

#include <iostream>

using namespace std;

int main()
{
   char c;
   for(c = 'A' ; c <= 'Z' ; c++)
   {
       cout<<c<<endl;
   }
    return 0;
}

------------------------------------------------------------------------------------
//WAP to Swap two numbers using temporary variable

#include <iostream>

using namespace std;

int main()
{
    int a = 2;
    int b = 3;
    int temp;
    cout<<"Before swap :"<<endl;
    cout<<"a = "<<a<<endl;
    cout<<"b = "<<b<<endl;


    temp = a;
    a = b ;
    b = temp;

    cout<<"After swap :"<<endl;
    cout<<"a = "<<a<<endl;
    cout<<"b = "<<b<<endl;
    return 0;
}

---------------------------------------------------------------------------------------------
//WAP to Swap two numbers without using temporary
variable

#include <iostream>

using namespace std;

int main()
{
   int a = 2;
   int b = 3;
   cout<<"Before swap :"<<endl;
    cout<<"a = "<<a<<endl;
    cout<<"b = "<<b<<endl;

   a = a+b;
   b=a-b;
   a=a-b;
   cout<<"after swap :"<<endl;
    cout<<"a = "<<a<<endl;
    cout<<"b = "<<b<<endl;

    return 0;
}

--------------------------------------------------------------------------------------------------
//WAP to Check whether an alphabet is vowel or
consonant

#include <iostream>

using namespace std;

int main()
{
   char c;
    int lowercase_vowel, uppercase_vowel;
    cout<<"Enter an alphabet: "<<endl;
    cin>>c;

    // evaluates to 1 if variable c is a lowercase vowel
    lowercase_vowel = (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');

    // evaluates to 1 if variable c is a uppercase vowel
    uppercase_vowel = (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');

    // evaluates to 1 (true) if c is a vowel
    if (lowercase_vowel || uppercase_vowel)
        cout<<"%c is a vowel."<<c<<endl;
    else
        cout<<"%c is a consonant."<<c<<endl;
    return 0;
}

---------------------------------------------------------------------------------------------------------
//WAP to Find the largest number among the given
numbers

#include <iostream>

using namespace std;

int main()
{
    int num1, num2;
    cin>>num1>>num2;
    if(num1 > num2)
    {
        cout<<num1<<" is greater"<<endl;
    }
    else
    {
        cout<<num2<<" is greater"<<endl;
    }
    return 0;
}


--------------------------------------------------------------------------------------------------
//WAP to Reverse a Number

#include <iostream>

using namespace std;

int main()
{
   int n, rev = 0, remainder;
    cout<<"Enter an integer: "<<endl;
    cin>>n;
    while (n != 0) {
        remainder = n % 10;
        rev = rev * 10 + remainder;
        n /= 10;
    }
    cout<<"Reversed number"<<rev<<endl;
    return 0;
}

----------------------------------------------------------------------------------------------------------
//WAP to Program to Check Palindrome

#include <iostream>

using namespace std;

int main()
{
  int n,r,sum=0,temp;
  cout<<"Enter the Number=";
  cin>>n;
 temp=n;
 while(n>0)
{
 r=n%10;
 sum=(sum*10)+r;
 n=n/10;
}
if(temp==sum)
cout<<"Number is Palindrome.";
else
cout<<"Number is not Palindrome.";
  return 0;
}

-------------------------------------------------------------------------------------------------
//WAP to Display Prime Numbers Between two Intervals

#include <iostream>

using namespace std;

int main() {
    int low, high, i;
    bool isPrime = true;

    cout << "Enter two numbers (intervals): ";
    cin >> low >> high;

    cout << "\nPrime numbers between " << low << " and " << high << " are: " << endl;

    while (low < high) {
        isPrime = true;
        if (low == 0 || low == 1) {
            isPrime = false;
        }
        else {
            for (i = 2; i <= low / 2; ++i) {
                if (low % i == 0) {
                    isPrime = false;
                    break;
                }
            }
        }

        if (isPrime)
            cout << low << " ";

        ++low;
    }

    return 0;
}

---------------------------------------------------------------------------------------------------------------

//WAP to Check Armstrong Number for n digit number
#include <iostream>

using namespace std;

int main() {
    int num, originalNum, remainder, result = 0;
    cout << "Enter a three-digit integer: ";
    cin >> num;
    originalNum = num;

    while (originalNum != 0) {

        remainder = originalNum % 10;
        result += remainder * remainder * remainder;
        originalNum /= 10;
    }

    if (result == num)
        cout << num << " is an Armstrong number.";
    else
        cout << num << " is not an Armstrong number.";

    return 0;
}

-------------------------------------------------------------------------------------
//WAP to Armstrong Numbers Between Two Integers

#include <iostream>
using namespace std;

int main()
{
  int num1, num2, i, num, digit, sum;

  cout << "Enter first number: ";
  cin >> num1;

  cout << "Enter second number: ";
  cin >> num2;

  cout << "Armstrong numbers between " << num1 << " and " << num2 << " are: " << endl;
  for(i = num1; i <= num2; i++)
  {
        sum = 0;
        num = i;

        for(; num > 0; num /= 10)
        {
            digit = num % 10;
            sum = sum + digit * digit * digit;
        }

        if(sum == i)
        {
            cout << i << endl;
        }
  }

  return 0;
}

------------------------------------------------------------------------------------------------------

//WAP to Represent a number as Sum of Two Prime Numbers

#include <iostream>
using namespace std;

bool checkPrime(int n);

int main() {
    int n, i;
    bool flag = false;

    cout << "Enter a positive  integer: ";
    cin >> n;

    for(i = 2; i <= n/2; ++i) {
        if (checkPrime(i)) {
            if (checkPrime(n - i)) {
                cout << n << " = " << i << " + " << n-i << endl;
                flag = true;
            }
        }
    }

    if (!flag)
      cout << n << " can't be expressed as sum of two prime numbers.";

    return 0;
}

// Check prime number
bool checkPrime(int n)
{
    int i;
    bool isPrime = true;

    // 0 and 1 are not prime numbers
    if (n == 0 || n == 1) {
        isPrime = false;
    }
    else {
        for(i = 2; i <= n/2; ++i) {
            if(n % i == 0) {
                isPrime = false;
                break;
            }
        }
    }

    return isPrime;
}

----------------------------------------------------------------------------------------------------------

// WAP to Convert Decimal to Octal
#include <iostream>
using namespace std;

void decToOctal(int n)
{
    int octalNum[100];

    int i = 0;
    while (n != 0) {

        octalNum[i] = n % 8;
        n = n / 8;
        i++;
    }

    for (int j = i - 1; j >= 0; j--)
        cout << octalNum[j];
}
int main()
{
    int n = 33;

    decToOctal(n);

    return 0;
}

-----------------------------------------------------------------------------------
//WAP to Convert Octal to Decimal

#include <iostream>
#include <math.h>
using namespace std;
int main()
{
    int num, temp, rem, oct = 0, i = 0;
    cout << "Enter an octal number : ";
    cin >> num;
    temp = num;
    while(temp != 0)
    {
        rem = temp % 10;
        oct += rem * pow(8, i++);
        temp = temp / 10;
    }
    cout << "\nDecimal equivalent of " << num << " is : " << oct;
    return 0;
}

-----------------------------------------------------------------------------------------

//WAP to convert binary number to decimal
#include <iostream>
#include <cmath>

using namespace std;

int convertBinaryToDecimal(long long);

int main()
{
    long long n;

    cout << "Enter a binary number: ";
    cin >> n;

    cout << n << " in binary = " << convertBinaryToDecimal(n) << "in decimal";
    return 0;
}

int convertBinaryToDecimal(long long n)
{
    int decimalNumber = 0, i = 0, remainder;
    while (n!=0)
    {
        remainder = n%10;
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
    return decimalNumber;
}

-------------------------------------------------------------------------------------------------
//WAP to convert decimal number to binary

#include <iostream>

using namespace std;
int main()
{
int a[10], n, i;
cout<<"Enter the number to convert: ";
cin>>n;
for(i=0; n>0; i++)
{
a[i]=n%2;
n= n/2;
}
cout<<"Binary of the given number= ";
for(i=i-1 ;i>=0 ;i--)
{
cout<<a[i];
}
}

------------------------------------------------------------------------------------------------

//WAP to Factorial of a Number Using Recursion


#include<iostream>
using namespace std;

int factorial(int n);

int main()
{
    int n;

    cout << "Enter a positive integer: ";
    cin >> n;

    cout << "Factorial of " << n << " = " << factorial(n);

    return 0;
}

int factorial(int n)
{
    if(n > 1)
        return n * factorial(n - 1);
    else
        return 1;
}

----------------------------------------------------------------------------------------

//WAP to Convert Binary to Octal


#include <iostream>
#include <cmath>

using namespace std;

int convertBinarytoOctal(long long);
int main()
{
    long long binaryNumber;

    cout << "Enter a binary number: ";
    cin >> binaryNumber;

    cout << binaryNumber << " in binary = " << convertBinarytoOctal(binaryNumber) << " in octal ";

    return 0;
}

int convertBinarytoOctal(long long binaryNumber)
{
    int octalNumber = 0, decimalNumber = 0, i = 0;

    while(binaryNumber != 0)
    {
        decimalNumber += (binaryNumber%10) * pow(2,i);
        ++i;
        binaryNumber/=10;
    }

    i = 1;

    while (decimalNumber != 0)
    {
        octalNumber += (decimalNumber % 8) * i;
        decimalNumber /= 8;
        i *= 10;
    }

    return octalNumber;
}

----------------------------------------------------------------------------------------------------------

//WAP to Convert Octal to Binary

#include <iostream>
#include <cmath>

using namespace std;

long long convertOctalToBinary(int);
int main()
{
    int octalNumber;

    cout << "Enter an octal number: ";
    cin >> octalNumber;

    cout << octalNumber << " in octal = " << convertOctalToBinary(octalNumber) << "in binary";

    return 0;
}

long long convertOctalToBinary(int octalNumber)
{
    int decimalNumber = 0, i = 0;
    long long binaryNumber = 0;

    while(octalNumber != 0)
    {
        decimalNumber += (octalNumber%10) * pow(8,i);
        ++i;
        octalNumber/=10;
    }

    i = 1;

    while (decimalNumber != 0)
    {
        binaryNumber += (decimalNumber % 2) * i;
        decimalNumber /= 2;
        i *= 10;
    }

    return binaryNumber;
}

---------------------------------------------------------------------------------------------------------------------
//WAP to Reverse a Sentence Using Recursion

#include <iostream>
using namespace std;

// function prototype
void reverse(const string& a);

int main() {
  string str;

  cout << " Please enter a string " << endl;
  getline(cin, str);

  reverse(str);

  return 0;
}
void reverse(const string& str) {

  size_t numOfChars = str.size();

  if(numOfChars == 1) {
    cout << str << endl;
  }
  else {
    cout << str[numOfChars - 1];

    reverse(str.substr(0, numOfChars - 1));
  }
}

--------------------------------------------------------------------------------------------------------------------

//WAP to calculate power using recursion
#include <iostream>
using namespace std;

int calculatePower(int, int);

int main()
{
    int base, powerRaised, result;

    cout << "Enter base number: ";
    cin >> base;

    cout << "Enter power number(positive integer): ";
    cin >> powerRaised;

    result = calculatePower(base, powerRaised);
    cout << base << "^" << powerRaised << " = " << result;

    return 0;
}

----------------------------------------------------------------------------------------------------------------------

//WAP to Find the largest element in an array



    cout << "Enter total number of elements(1 to 100): ";
    cin >> n;
    cout << endl;

    // Store number entered by the user
    for(i = 0; i < n; ++i)
    {
       cout << "Enter Number " << i + 1 << " : ";
       cin >> arr[i];
    }

    // Loop to store largest number to arr[0]
    for(i = 1;i < n; ++i)
    {
       // Change < to > if you want to find the smallest element
       if(arr[0] < arr[i])
           arr[0] = arr[i];
    }
    cout << "Largest element = " << arr[0];

    return 0;
}
